@using DomowaBiblioteczka.Data.Models
@using DomowaBiblioteczka.Services.MediaTypes
@using DomowaBiblioteczka.Services.Units
@using Microsoft.AspNetCore.Authorization
@using static DomowaBiblioteczka.Globals


@inject DialogService DialogService
@inject IMediaTypesService mediaTypeService
@inject IUnitsService unitService

@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

@page "/MediaTypesList"

<PageTitle>List of Key Names</PageTitle>

@if (isLoading)
{
    <div class="rz-text-align-center">
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" />
        <p>Loading data...</p>
    </div>
}
else
{
    <div class="rz-p-12 rz-text-align-center" style="width: 100%;">
        <RadzenDataGrid Data="mediaTypesList"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Simple"
                        AllowSorting="true"
                        AllowPaging="true"
                        PageSize="25"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        @ref=mediaTypesGrid>

            <HeaderTemplate>
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Order" Click="@InsertRow" Disabled="@(editing)" />
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="MediaType" Property="Name" Title="Name" Sortable="true" Filterable="true">
                    <EditTemplate Context="MediaType">
                        <RadzenTextBox @bind-Value="MediaType.Name" MaxLength="100" Style="width: 100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="MediaType" Property="Unit.Name" Title="Unit" Sortable="true" Filterable="true">
                    <EditTemplate Context="MediaType">
                        <RadzenDropDown @bind-Value="MediaType.UnitId" Data="@unitList" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Edit" Width="100px" MinWidth="100px">
                    <Template Context="MediaType">
                        <RadzenButton Icon="Edit" ButtonStyle="ButtonStyle.Primary" Click=@(args => OnClick(Operations.ChangeMode,MediaType)) />
                    </Template>
                    <EditTemplate Context="MediaType">
                        <RadzenButton Icon="Check" ButtonStyle="ButtonStyle.Success" Click=@(args => OnClick(Operations.Edit,MediaType)) />
                        <RadzenButton Icon="Close" ButtonStyle="ButtonStyle.Warning" Click=@(args => OnClick(Operations.Cancel,MediaType)) />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Del" Width="75px" MinWidth="50px">
                    <Template Context="MediaType">
                        <RadzenButton Icon="Delete" ButtonStyle="ButtonStyle.Danger" Click=@(args => OnClick(Operations.Delete,MediaType)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>

}
@code
{
    //TODO: add column with coma separated roles
    private IEnumerable<MediaType> mediaTypesList;
    private IEnumerable<Unit> unitList;

    private RadzenDataGrid<MediaType> mediaTypesGrid;


    private DataGridEditMode editMode = DataGridEditMode.Single;
    private MediaType originalMediaType;

    private bool isLoading = true;
    private bool editing = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await InitializeData();

        isLoading = false;

        await base.OnInitializedAsync();
    }

    private async Task InitializeData()
    {
        mediaTypesList = await mediaTypeService.GetAllAsync();
        unitList = await unitService.GetAllAsync();

    }

    async Task InsertRow()
    {
        var order = new MediaType();
        await mediaTypesGrid.InsertRow(order);
    }

    private async Task OnClick(Operations operationType, MediaType mediaType)
    {
        if (operationType == Operations.Edit)
        {
            //TODO: Implement UI side validation

            if (mediaTypesList.Any(a => a.Id.Equals(mediaType.Id)))
            {
                await mediaTypeService.UpdateAsync(mediaType);
            }
            else
            {
                await mediaTypeService.AddAsync(mediaType);
                await InitializeData();
            }
            await mediaTypesGrid.UpdateRow(mediaType);
            editing = false;
            //TODO: Implement pop up about succeded operation or fail
        }

        if (operationType == Operations.Cancel)
        {
            mediaTypesGrid.CancelEditRow(originalMediaType);
            await InitializeData();
            editing = false;
        }

        if (operationType == Operations.ChangeMode)
        {
            originalMediaType = mediaType;
            editing = true;
            await mediaTypesGrid.EditRow(mediaType);

        }

        if (operationType == Operations.Delete)
        {
            var result = await DialogService.Confirm(
           "Are you sure?",
           $"Delete: {mediaType.Name}",
           new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }
       );
            if (result == true)
            {
                await mediaTypeService.DeleteAsync(mediaType.Id);

                await InitializeData();
            }
        }
    }
}
