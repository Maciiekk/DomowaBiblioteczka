@using DomowaBiblioteczka.Data.Models
@using DomowaBiblioteczka.Services.Authors
@using DomowaBiblioteczka.Services.KeyWords
@using DomowaBiblioteczka.Services.Medias
@using Microsoft.AspNetCore.Authorization

@inject DialogService DialogService
@inject IMediasService mediaService
@inject IAuthorsService authorService
@inject IKeyWordsService keywordService

@attribute [Authorize(Roles = "User,Admin")]

@rendermode InteractiveServer

@page "/MediaDetails/{id}"


@if (isLoading)
{
    <div class="rz-text-align-center">
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" />
        <p>Loading data...</p>
    </div>
}
else
{
    <div class="container">
        <div class="row align-items-stretch">
            <!-- Top Row -->
            <div class="col-4  border ">
                <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">

                    <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(media.Image)}")" AlternateText="binary image" />

                </RadzenStack>
            </div>
            <div class="col-8 d-flex flex-column  border">
                <div class="row align-items-stretch">
                    <div class="col-12 border">

                        <div class="row align-items-stretch">
                            <div class="col-6 d-flex flex-column border">
                                <RadzenTextBox Value="@media.Title" Style=" width:100%;rz-h-auto"  />
                            </div>
                            <div class="col-6 d-flex flex-column border">
                                <RadzenTextBox Value="@media.Industry.Name" Style=" width:100%;rz-h-auto" />

                            </div>
                        </div>
                    </div>
                </div>
                <div class="row align-items-stretch">
                    <div class="col-12 border">
                        <div class="row align-items-stretch">
                            <div class="col-6 border">

                                <RadzenTextArea @bind-Value="media.Industry.Description" MaxLength="1000" Style="width: 100%;resize:none" />
                            </div>
                            <div class="col-6 border">
                                <RadzenTextArea @bind-Value="media.Industry.Description" MaxLength="1000" Style="width: 100%;resize:none" />

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            
            <div class="col-4 border">
                <RadzenDataList TItem="Author" Data="media.Authors" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                    <Template Context="author">
                            <RadzenText>@author.Name</RadzenText>
                    </Template>

                </RadzenDataList>
            </div>
            <!-- Bottom Row -->
            <div class="col-4 border">
                <!-- ISBN, DATE REALISED, LENGTH UNIT, AUTHOR -->
                <RadzenTextBox Name="ISBN" Value="@media.ISBN"/>
                <RadzenDatePicker Name="Realise Date" @bind-Value="@media.ReleseDate"/>
                <RadzenTextBox Name="Length" Value="@media.Length.ToString()" />
                <RadzenTextBox Name="Unit" Value="@media.MediaType.Unit.Symbole"/>
                
            </div>
            <div class="col-4 border">
                <RadzenDataList TItem="KeyWord" Data="media.Keywords" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                    <Template Context="keyWord">
                        <RadzenText>@keyWord.Word</RadzenText>
                    </Template>
                </RadzenDataList>
            </div>            
        </div>
    </div>
}

@code {
    [Parameter]
    public string id { get; set; }

    IEnumerable<Author> authors;
    IEnumerable<KeyWord> keyWords;

    private int convertedId;

    Media media { get; set; }

    private bool isLoading = true;
    private bool editing = false;
    public bool isAdmin = false;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        if (Int32.TryParse(id, out convertedId))
        {
            await InitializeData(convertedId);

            isLoading = false;
        }

        await base.OnInitializedAsync();
    }

    private async Task InitializeData(int id)
    {
        media = await mediaService.GetByIdAsync(id);
        authors = await authorService.GetAllAsync();
        keyWords = await keywordService.GetAllAsync();
    }
}
