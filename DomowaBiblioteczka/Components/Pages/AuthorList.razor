@using DomowaBiblioteczka.Data
@using DomowaBiblioteczka.Data.Models
@using DomowaBiblioteczka.Services.Authors
@using Microsoft.AspNetCore.Authorization
@using static DomowaBiblioteczka.Globals

@inject DialogService DialogService
@inject IAuthorsService authorsService

@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

@page "/AuthorsList"

<PageTitle>List of authors</PageTitle>

@if (isLoading)
{
    <div class="rz-text-align-center">
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" />
        <p>Loading data...</p>
    </div>
}
else
{
    <div class="rz-p-12 rz-text-align-center" style="width: 100%;">
        <RadzenDataGrid Data="authorsList"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Simple"
                        AllowSorting="true"
                        AllowPaging="true"
                        PageSize="25"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        @ref=authorsGrid>

            <HeaderTemplate>
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Order" Click="@InsertRow" Disabled="@(editing)" />
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="Author" Property="Name" Title="Name" Sortable="true" Filterable="true">
                    <EditTemplate Context="author">
                        <RadzenTextBox @bind-Value="author.Name" MaxLength="200" Style="width: 100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Author" Property="Description" Title="Description" Sortable="true" Filterable="true">
                    <EditTemplate Context="author">
                        <RadzenTextArea @bind-Value="author.Description" MaxLength="1000" Style="width: 100%"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Edit" Width="100px" MinWidth="100px">
                    <Template Context="author">
                        <RadzenButton Icon="Edit" ButtonStyle="ButtonStyle.Primary" Click=@(args => OnClick(Operations.ChangeMode,author)) />
                    </Template>
                    <EditTemplate Context="author">
                        <RadzenButton Icon="Check" ButtonStyle="ButtonStyle.Success" Click=@(args => OnClick(Operations.Edit,author)) />
                        <RadzenButton Icon="Close" ButtonStyle="ButtonStyle.Warning" Click=@(args => OnClick(Operations.Cancel,author)) />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Del" Width="75px" MinWidth="50px">
                    <Template Context="author">
                        <RadzenButton Icon="Delete" ButtonStyle="ButtonStyle.Danger" Click=@(args => OnClick(Operations.Delete,author)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>

}
@code
{
    //TODO: add column with coma separated roles

    private IEnumerable<Author> authorsList;

    private RadzenDataGrid<Author> authorsGrid;
    private DataGridEditMode editMode = DataGridEditMode.Single;
    private Author originalAuthor;

    private bool isLoading = true;
    private bool editing = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await InitializeData();

        isLoading = false;

        await base.OnInitializedAsync();
    }

    private async Task InitializeData()
    {
        authorsList = await authorsService.GetAllAsync();

    }

    async Task InsertRow()
    {
        var order = new Author();
        await authorsGrid.InsertRow(order);
    }

    private async Task OnClick(Operations operationType, Author author)
    {
        if (operationType == Operations.Edit)
        {
            //TODO: Implement UI side validation

            if (authorsList.Any(a => a.Id.Equals(author.Id)))
            {
                await authorsService.UpdateAsync(author);
            }
            else
            {
                await authorsService.AddAsync(author);
                await InitializeData();
            }
            await authorsGrid.UpdateRow(author);
            //TODO: Implement pop up about succeded operation or fail
        }

        if (operationType == Operations.Cancel)
        {
            authorsGrid.CancelEditRow(originalAuthor);
            await InitializeData();
            editing = false;
        }

        if (operationType == Operations.ChangeMode)
        {
            originalAuthor = author;
            editing = true;
            await authorsGrid.EditRow(author);

        }

        if (operationType == Operations.Delete)
        {
            var result = await DialogService.Confirm(
           "Are you sure?",
           $"Delete: {author.Name}",
           new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }
       );
            if (result == true)
            {
                await authorsService.DeleteAsync(author.Id);

                await InitializeData();
            }
        }    
    }
}
