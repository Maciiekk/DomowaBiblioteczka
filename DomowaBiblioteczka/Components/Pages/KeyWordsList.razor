@using DomowaBiblioteczka.Data.Models
@using DomowaBiblioteczka.Services.KeyWords
@using Microsoft.AspNetCore.Authorization
@using static DomowaBiblioteczka.Globals


@inject DialogService DialogService
@inject IKeyWordsService keyWordService

@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

@page "/keyWordsList"

<PageTitle>List of Key Words</PageTitle>

@if (isLoading)
{
    <div class="rz-text-align-center">
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" />
        <p>Loading data...</p>
    </div>
}
else
{
    <div class="rz-p-12 rz-text-align-center" style="width: 100%;">
        <RadzenDataGrid Data="keyWordsList"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Simple"
                        AllowSorting="true"
                        AllowPaging="true"
                        PageSize="25"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        @ref=keyWordsGrid>

            <HeaderTemplate>
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Order" Click="@InsertRow" Disabled="@(editing)" />
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="KeyWord" Property="Word" Title="Word" Sortable="true" Filterable="true">
                    <EditTemplate Context="KeyWord">
                        <RadzenTextBox @bind-Value="KeyWord.Word" MaxLength="100" Style="width: 100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Edit" Width="100px" MinWidth="100px">
                    <Template Context="KeyWord">
                        <RadzenButton Icon="Edit" ButtonStyle="ButtonStyle.Primary" Click=@(args => OnClick(Operations.ChangeMode,KeyWord)) />
                    </Template>
                    <EditTemplate Context="KeyWord">
                        <RadzenButton Icon="Check" ButtonStyle="ButtonStyle.Success" Click=@(args => OnClick(Operations.Edit,KeyWord)) />
                        <RadzenButton Icon="Close" ButtonStyle="ButtonStyle.Warning" Click=@(args => OnClick(Operations.Cancel,KeyWord)) />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Del" Width="75px" MinWidth="50px">
                    <Template Context="KeyWord">
                        <RadzenButton Icon="Delete" ButtonStyle="ButtonStyle.Danger" Click=@(args => OnClick(Operations.Delete,KeyWord)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>

}
@code
{
    //TODO: add column with coma separated roles
    private IEnumerable<KeyWord> keyWordsList;

    private RadzenDataGrid<KeyWord> keyWordsGrid;

    private DataGridEditMode editMode = DataGridEditMode.Single;
    private KeyWord originalKeyWord;

    private bool isLoading = true;
    private bool editing = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await InitializeData();

        isLoading = false;

        await base.OnInitializedAsync();
    }

    private async Task InitializeData()
    {
        keyWordsList = await keyWordService.GetAllAsync();

    }

    async Task InsertRow()
    {
        var order = new KeyWord();
        await keyWordsGrid.InsertRow(order);
    }

    private async Task OnClick(Operations operationType, KeyWord keyWord)
    {
        if (operationType == Operations.Edit)
        {
            //TODO: Implement UI side validation

            if (keyWordsList.Any(a => a.Id.Equals(keyWord.Id)))
            {
                await keyWordService.UpdateAsync(keyWord);
            }
            else
            {
                await keyWordService.AddAsync(keyWord);
                await InitializeData();
            }
            await keyWordsGrid.UpdateRow(keyWord);
            //TODO: Implement pop up about succeded operation or fail
        }

        if (operationType == Operations.Cancel)
        {
            keyWordsGrid.CancelEditRow(originalKeyWord);
            await InitializeData();
            editing = false;
        }

        if (operationType == Operations.ChangeMode)
        {
            originalKeyWord = keyWord;
            editing = true;
            await keyWordsGrid.EditRow(keyWord);

        }

        if (operationType == Operations.Delete)
        {
            var result = await DialogService.Confirm(
           "Are you sure?",
           $"Delete: {keyWord.Word}",
           new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }
       );
            if (result == true)
            {
                await keyWordService.DeleteAsync(keyWord.Id);

                await InitializeData();
            }
        }
    }
}
