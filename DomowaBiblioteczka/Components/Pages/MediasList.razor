@using DomowaBiblioteczka.Data
@using DomowaBiblioteczka.Data.Models
@using DomowaBiblioteczka.Services.Industries
@using DomowaBiblioteczka.Services.MediaTypes
@using DomowaBiblioteczka.Services.Medias
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using static DomowaBiblioteczka.Globals


@inject DialogService DialogService
@inject IMediasService mediaService
@inject IMediaTypesService mediaTypesService
@inject IIndustriesService industryService
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "User,Admin")]

@rendermode InteractiveServer

@page "/MediasList"

<PageTitle>List of Medias</PageTitle>

@if (isLoading)
{
    <div class="rz-text-align-center">
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" />
        <p>Loading data...</p>
    </div>
}
else
{
    <div class="rz-p-12 rz-text-align-center" style="width: 100%;">
        <RadzenDataGrid Data="mediaList"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Simple"
                        AllowSorting="true"
                        AllowPaging="true"
                        PageSize="25"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        @ref=mediaGrid>   
                        <HeaderTemplate>
                        <AuthorizeView Roles="Admin" > 
                            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Order" Click="@InsertRow" Disabled="@(editing)" />
                         </AuthorizeView>    
                        </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="Media" Property="Title" Title="Title" Sortable="true" Filterable="true">
                    <EditTemplate Context="media">
                        <RadzenTextBox @bind-Value="media.Title" MaxLength="200" Style="width: 100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Media" Property="Description" Title="Description" Sortable="false" Filterable="true">
                    <EditTemplate Context="media">
                        <RadzenTextArea @bind-Value="media.Description" MaxLength="1000" Style="width: 100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="Media" Property="MediaType.Name" Title="Type" Sortable="true" Filterable="true">
                    <EditTemplate Context="media">
                        <RadzenDropDown @bind-Value="media.MediaTypeID" Data="@mediaTypesList" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Media" Property="Length" Title="No" Sortable="true" Filterable="true">
                    <EditTemplate Context="media">
                        <RadzenNumeric Min="1" @bind-Value=@media.Length Style="width: 100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Media" Property="MediaType.Unit.Symbole" Title="unit" Sortable="true" Filterable="true" />


                <RadzenDataGridColumn TItem="Media" Property="Industry.Name" Title="Industry" Sortable="true" Filterable="true">
                    <EditTemplate Context="media">
                        <RadzenDropDown @bind-Value="media.IndustryID" Data="@industryList" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Media" Property="CreatedDate" Title="Added At" Sortable="true" Filterable="false">
                    <EditTemplate Context="media">
                        <RadzenDatePicker @bind-Value="media.CreatedDate" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Media" Property="ReleseDate" Title="Released At" Sortable="true" Filterable="false">
                    <EditTemplate Context="media">
                        <RadzenDatePicker @bind-Value="media.ReleseDate" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Media" Property="UpdatedDate" Title="Last Update" Sortable="true" Filterable="false"/>

                <RadzenDataGridColumn Title="Edit" Width="100px" MinWidth="100px">
                    <Template Context="media">
                        <RadzenButton Icon="Edit" ButtonStyle="ButtonStyle.Primary" Click=@(args => OnClick(Operations.ChangeMode,media)) />
                    </Template>
                    <EditTemplate Context="media">
                        <RadzenButton Icon="Check" ButtonStyle="ButtonStyle.Success" Click=@(args => OnClick(Operations.Edit,media)) />
                        
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Details" Width="75px" MinWidth="50px">
                    <Template Context="media">
                        <RadzenButton Icon="License" ButtonStyle="ButtonStyle.Secondary" Click=@(args => OnClick(Operations.RolesChange,media)) />
                    </Template>
                    <EditTemplate Context="media">
                        <RadzenButton Icon="Close" ButtonStyle="ButtonStyle.Warning" Click=@(args => OnClick(Operations.Cancel,media)) />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Del" Width="75px" MinWidth="50px">
                    <Template Context="media">
                        <RadzenButton Icon="Delete" ButtonStyle="ButtonStyle.Danger" Click=@(args => OnClick(Operations.Delete,media)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@code
{
    //TODO: Realise before Added (dates validation)
    //TODO: find way to dynamicly change column name
    private IEnumerable<Media> mediaList;
    private IEnumerable<MediaType> mediaTypesList;
    private IEnumerable<Industry> industryList;

    private RadzenDataGrid<Media> mediaGrid;
    private DataGridEditMode editMode = DataGridEditMode.Single;
    private Media originalMedia;

    private bool isLoading = true;
    private bool editing = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await InitializeData();

        isLoading = false;

        await base.OnInitializedAsync();
    }

    private async Task InitializeData()
    {
        mediaList = await mediaService.GetAllAsync();
        mediaTypesList = await mediaTypesService.GetAllAsync();
        industryList = await industryService.GetAllAsync();

    }

    async Task InsertRow()
    {
        var order = new Media();
        await mediaGrid.InsertRow(order);
    }

    private async Task OnClick(Operations operationType, Media media)
    { 
        media.UpdatedDate = DateTime.Now;

        if (operationType == Operations.Edit)
        {
            //TODO: Implement UI side validation

            if (mediaList.Any(a => a.Id.Equals(media.Id)))
            {
                await mediaService.UpdateAsync(media);
            }
            else
            {
                await mediaService.AddAsync(media);
                await InitializeData();
            }
            await mediaGrid.UpdateRow(media);
            editing = false;
            //TODO: Implement pop up about succeded operation or fail
        }

        if (operationType == Operations.Cancel)
        {
            mediaGrid.CancelEditRow(originalMedia);
            await InitializeData();
            editing = false;
        }

        if (operationType == Operations.ChangeMode)
        {
            originalMedia = media;
            editing = true;
            await mediaGrid.EditRow(media);

        }

        if (operationType == Operations.RolesChange)
        {
            Navigation.NavigateTo($"/MediaDetails/{media.Id}");
        }

        if (operationType == Operations.Delete)
        {
            var result = await DialogService.Confirm(
           "Are you sure?",
           $"Delete: {media.Title}",
           new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }
       );
            if (result == true)
            {
                await mediaService.DeleteAsync(media.Id);

                await InitializeData();
            }
        }
    }

}